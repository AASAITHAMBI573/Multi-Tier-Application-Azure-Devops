trigger:
- none

pool:
  name: Multi_Tier
  demands:
    - agent.name -equals Agent-1

stages:
  - stage: compile
    displayName: 'Maven Compile'
    jobs:
      - job: maven_compile
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'compile'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          
  - stage: test
    displayName: 'Maven test'
    jobs:
      - job: unit_test
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          
  - stage: trivy_fs_scan
    displayName: 'Trivy FS Scan'
    jobs:
      - job: trivy_fs_scan
        displayName: 'Trivy FS Scan'
        steps:
          - task: CmdLine@2
            inputs:
              script: 'trivy fs --format table -o fs.html .'
            
  - stage: sonarqube
    displayName: 'SonarAnalysis'
    jobs:
      - job: sonarqube_analysis
        displayName: 'SonarAnalysis'
        steps:
        - task: SonarQubePrepare@7
          inputs:
            SonarQube: 'sonar-svc'
            scannerMode: 'cli'
            configMode: 'manual'
            cliProjectKey: 'bankapp'
            cliProjectName: 'bankapp'
            cliSources: '.'
            extraProperties: 'sonar.java.binaries=.'
            
        - task: SonarQubeAnalyze@7
          inputs:
            jdkversion: 'JAVA_HOME_17_X64'

  - stage: publish_artifacts
    displayName: 'Publish_Build_Artifacts'
    jobs:
      - job: publish_artifacts
        displayName: 'Publish_Build_Artifacts'
        steps:
              
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean deploy'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          
          - task: MavenAuthenticate@0
            inputs:
              artifactsFeeds: 'bankapp-maven'

  - stage: docker_build
    displayName: 'Docker_Build'
    jobs:
      - job: docker_build
        displayName: 'Docker_Build'
        steps: 
        
          - task: CmdLine@2
            inputs:
              script: 'mvn package'
          - task: Docker@2
            inputs:
              containerRegistry: 'docker-svc'
              repository: 'bankapp'
              command: 'build'
              Dockerfile: '**/Dockerfile'
              tags: 'latest'

  - stage: trivy_images_scan
    displayName: 'Trivy Images Scan'
    jobs:
      - job: trivy_images_scan
        displayName: 'Trivy Images Scan'
        steps:
          - task: CmdLine@2
            inputs:
              script: 'docker tag public.ecr.aws/bankapp:latest $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/bankapp:latest'
          - task: CmdLine@2
            inputs:
              script: trivy image --format table -o image.html $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/bankapp:latest
  
  - stage: docker_publish
    displayName: 'Docker_Publish'
    jobs:
      - job: docker_publish
        displayName: 'Docker_Publish'
        steps:
        - task: CmdLine@2
          displayName: 'Login to Amazon ECR'
          inputs:
            script: 'aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com'
        - task: CmdLine@2
          displayName: 'Push to Amazon ECR'
          inputs:
            script: 'docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/bankapp:latest'           
        - task: CmdLine@2
          displayName: 'Remove Images'
          inputs:
            script: |
              'docker rmi -f $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/bankapp:latest'
              'docker rmi -f public.ecr.aws/bankapp:latest'
            
        